<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://urara-demo.netlify.app/</id>
  <title><![CDATA[AkaniX3]]></title>
  <subtitle><![CDATA[Blog Page]]></subtitle>
  <icon>https://urara-demo.netlify.app/favicon.png</icon>
  <link href="https://urara-demo.netlify.app" />
  <link href="https://urara-demo.netlify.app/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2024-06-14T07:47:26.013Z</updated>
  <author>
    <name><![CDATA[AkaniX3]]></name>
  </author>
  <category term="CTF" scheme="https://urara-demo.netlify.app/?tags=CTF" />
  <category term="Cryptography" scheme="https://urara-demo.netlify.app/?tags=Cryptography" />
  <category term="Urara" scheme="https://urara-demo.netlify.app/?tags=Urara" />
  <category term="Elements" scheme="https://urara-demo.netlify.app/?tags=Elements" />
  <category term="Front-Matter" scheme="https://urara-demo.netlify.app/?tags=Front-Matter" />
  <category term="Hello World" scheme="https://urara-demo.netlify.app/?tags=Hello%20World" />
  <entry>
    <title type="html"><![CDATA[Akasec CTF 2024 writeup]]></title>
    <link href="https://urara-demo.netlify.app/blogs/akasec_CTF_2024" />
    <id>https://urara-demo.netlify.app/blogs/akasec_CTF_2024</id>
    <published>2024-06-11T00:00:00.000Z</published>
    <updated>2024-06-14T07:46:52.067Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-47jd1v">My writeup on Akasec CTF on the challs solved by my team ‘Bits &amp; Pieces’ and we placed rank 13th on this ctf event, it was a pretty good run this time!</p> <h2 id="crypto" data-svelte-h="svelte-wa5cyn"><a href="#crypto">Crypto:</a></h2> <h3 id="lost" data-svelte-h="svelte-yqweog"><a href="#lost">Lost</a></h3> <p data-svelte-h="svelte-1c7kq8k">In the given code:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>from random import getrandbits</div><div class='line'>from Crypto.Util.number import getPrime, bytes_to_long</div><div class='line'>from SECRET import FLAG</div><div class='line'></div><div class='line'>e = 2</div><div class='line'>p = getPrime(256)</div><div class='line'>q = getPrime(256)</div><div class='line'>n = p * q</div><div class='line'></div><div class='line'>m = bytes_to_long(FLAG)</div><div class='line'>cor_m = m - getrandbits(160)</div><div class='line'></div><div class='line'>if __name__ == "__main__":</div><div class='line'>    c = pow(m, e, n)</div><div class='line'>    print("n = &#123;&#125;&#92;nc = &#123;&#125;&#92;ncor_m = &#123;&#125;".format(n, c, cor_m))</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-12gy2jx">We can identify that the <code>getrandbits(160)</code> is a small range and we can exploit this vulnerablility using the “Coppersmith’s Attack” which helps us to find the potential value to decrypt the flag.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>m=724154397787031699242933363312913323086319394176220093419616667612889538090840511506381320998293481458429167685676367015744314015744</div><div class='line'>n=5113166966960118603250666870544315753374750136060769465485822149528706374700934720443689630473991177661169179462100732951725871457633686010946951736764639</div><div class='line'>e=2</div><div class='line'>c=329402637167950119278220170950190680807120980712143610290182242567212843996710001488280098771626903975534140478814872389359418514658167263670496584963653</div><div class='line'>P.&lt;x&gt; = PolynomialRing(Zmod(n), implementation='NTL')</div><div class='line'>pol = (m + x)**2 - c</div><div class='line'>roots = pol.small_roots(epsilon=1/50)</div><div class='line'>print("Potential solutions:")</div><div class='line'>for root in roots:</div><div class='line'>      a = root+m</div><div class='line'>      print(root+m)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1gxiubc">Here the code attempts to find small roots of the polynomial using the small_roots method with an epsilon value of 1/50. The small_roots method is used to find roots of a polynomial where the roots are known to be small relative to the modulus n.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>roots = pol.small_roots(epsilon=1/50)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1rnkgep">Then we iterate through the found roots, add each root to m, and prints the result. The addition of m to each root is done because the polynomial was defined as (m+x), so the roots found are offsets from m.</p> <p data-svelte-h="svelte-101tood">The encryption operation for RSA with exponent e can be written as: c = (m+k)<sup>2</sup> mod n</p> <p data-svelte-h="svelte-lfn3ol">where k is some small value. The polynomial (m+x)<sup>2</sup> - c is constructed and the small roots method is used to find the possible values of k. By adding these roots back to m, the code attempts to recover the original plaintext m.</p> <p data-svelte-h="svelte-11jp7hr">Flag: <code>AKASEC{c0pp3r5m17h_4774ck_1n_1ov3_w17h_5m4ll_3xp0n3nts}</code></p> <h3 id="power-over-all" data-svelte-h="svelte-w9mjb8"><a href="#power-over-all">Power Over All</a></h3> <p data-svelte-h="svelte-9nci6w">meow</p> <h3 id="twin" data-svelte-h="svelte-oug0wg"><a href="#twin">Twin</a></h3> <p data-svelte-h="svelte-1c7kq8k">In the given code:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes</div><div class='line'>from SECRET import FLAG</div><div class='line'></div><div class='line'>e = 5</div><div class='line'>p = getPrime(256)</div><div class='line'>q = getPrime(256)</div><div class='line'>n = p * q</div><div class='line'></div><div class='line'>m1 = bytes_to_long(FLAG)</div><div class='line'>m2 = m1 &gt;&gt; 8</div><div class='line'></div><div class='line'>if __name__ == "__main__":</div><div class='line'>    c1, c2 = pow(m1, e, n), pow(m2, e, n)</div><div class='line'>    print("n = &#123;&#125;&#92;nc1 = &#123;&#125;&#92;nc2 = &#123;&#125;".format(n, c1, c2))</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-h1nrj4">We need to exploit a specific relationship between the plaintext messages encrypted as c1 and c2 under the same RSA modulus and small exponent e=5. To find the missing value of the encrypted flag, let’s say ‘k’, It iterates over potential values of k, calculates the GCD of the resulting polynomials, and checks for non-trivial solutions that can be used to derive the plaintext.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>e=5</div><div class='line'>n=6689395968128828819066313568755352659933786163958960509093076953387786003094796620023245908431378798689402141767913187865481890531897380982752646248371131</div><div class='line'>c1=3179086897466915481381271626207192941491642866779832228649829433228467288272857233211003674026630320370606056763863577418383068472502537763155844909495261</div><div class='line'>c2=6092690907728422411002652306266695413630015459295863614266882891010434275671526748292477694364341702119123311030726985363936486558916833174742155473021704</div><div class='line'>n1=n</div><div class='line'>n2=n</div><div class='line'></div><div class='line'>def my_gcd(a, b): </div><div class='line'>    return a.monic() if b == 0 else my_gcd(b, a % b) </div><div class='line'></div><div class='line'>R.&lt;m2&gt;=Zmod(n)[]</div><div class='line'>for k in range(256):</div><div class='line'>   f1=(m2*256+k)^e-c1</div><div class='line'>   f2=m2^e-c2</div><div class='line'>   if(my_gcd(f1, f2).coefficients()[0] != 1): # finds the potential</div><div class='line'>        res = (my_gcd(f1, f2).small_roots()[0] * 256) + k </div><div class='line'>        print(long_to_bytes(Integer(res))) # prints the flag</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-7a2ica">If the leading coefficient of the GCD is not 1, it indicates a potential value which was at iteration 125 which converts to the ascii value <code>}</code>. Then uses the small_roots method to find the potential message.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>   if(my_gcd(f1, f2).coefficients()[0] != 1): # finds the potential</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-17iupm2">The message is converted into a readable format, and prints it.</p> <p data-svelte-h="svelte-1cch9bp">Flag: <code>AKASEC{be_on_the_right_side_of_history_free_palestine}</code></p> <h3 id="my-calculus-lab" data-svelte-h="svelte-1excqrt"><a href="#my-calculus-lab">My Calculus Lab</a></h3> <p data-svelte-h="svelte-1c7kq8k">In the given code:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>from Crypto.Cipher import AES</div><div class='line'>from Crypto.Util.Padding import pad</div><div class='line'>import hashlib</div><div class='line'>import sympy as sp</div><div class='line'>import random</div><div class='line'></div><div class='line'>FLAG = b'REDACTED'</div><div class='line'></div><div class='line'>key = random.getrandbits(7)</div><div class='line'></div><div class='line'>x = sp.symbols('x')</div><div class='line'></div><div class='line'>f = "REDACTED"</div><div class='line'>f_prime = "REDACTED"</div><div class='line'>f_second_prime = "REDACTED"</div><div class='line'></div><div class='line'>assert(2*f_second_prime - 6*f_prime + 3*f == 0)</div><div class='line'>assert(f.subs(x, 0) | f_prime.subs(x, 0) == 14)</div><div class='line'></div><div class='line'>def encrypt(message, key):</div><div class='line'>    global f</div><div class='line'>    global x</div><div class='line'>    point = f.subs(x, key).evalf(100)</div><div class='line'>    point_hash = hashlib.sha256(str(point).encode()).digest()[:16]</div><div class='line'>    cipher = AES.new(point_hash, AES.MODE_CBC)</div><div class='line'>    iv = cipher.iv</div><div class='line'>    ciphertext = cipher.encrypt(pad(message, AES.block_size))</div><div class='line'>    return iv.hex() + ciphertext.hex()</div><div class='line'></div><div class='line'>encrypted = encrypt(FLAG, key)</div><div class='line'></div><div class='line'>print(f"Key: &#123;key&#125;")</div><div class='line'>print(f"Encrypted: &#123;encrypted&#125;")</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1rhwiyn">On observing the above code we can clearly see that:</p> <ul data-svelte-h="svelte-164us0m"><li>The function f satisfies a second-order linear differential equation: 2f” - 6f- + 3f = 0</li> <li>Encryption key is derived by evaluating function f at a key value (7-bits)</li> <li>This key is then hashed using SHA-256 to generate the AES key.</li></ul> <p data-svelte-h="svelte-j3428z">To decrypt the message, we need to just reverse the process, that’s to solve the differential equation with various initial conditions and regenerate the AES key.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>from Crypto.Cipher import AES</div><div class='line'>from Crypto.Util.Padding import pad,unpad</div><div class='line'>import hashlib</div><div class='line'>import sympy as sp</div><div class='line'>import random</div><div class='line'>import math</div><div class='line'>from sympy import symbols, Function, Eq, dsolve, exp, Derivative</div><div class='line'></div><div class='line'>x = sp.symbols('x')</div><div class='line'>e=math.e</div><div class='line'>Key=60</div><div class='line'>Encrypted='805534c14e694348a67da0d75165623cf603c2a98405b34fe3ba8752ce24f5040c39873ec2150a61591b233490449b8b7bedaf83aa9d4b57d6469cd3f78fdf55'</div><div class='line'></div><div class='line'>iv_hex=Encrypted[:32]</div><div class='line'>ct=Encrypted[32:]</div><div class='line'></div><div class='line'>iv=bytes.fromhex(iv_hex)</div><div class='line'>c=bytes.fromhex(ct)</div><div class='line'></div><div class='line'>pos14=[[0, 14], [2, 12], [2, 14], [4, 10], [4, 14], [6, 8], [6, 10], [6, 12], [6, 14], [8, 6], [8, 14], [10, 4], [10, 6], [10, 12], [10, 14], [12, 2], [12, 6], [12, 10], [12, 14], [14, 0], [14, 2], [14, 4], [14, 6], [14, 8], [14, 10], [14, 12], [14, 14]]</div><div class='line'></div><div class='line'>x = symbols('x')</div><div class='line'>y = Function('y')(x)</div><div class='line'></div><div class='line'># Define the differential equation 2y''-6y'+3y=0</div><div class='line'>differential_eq = Eq(2*y.diff(x, x) - 6*y.diff(x) + 3*y, 0)</div><div class='line'></div><div class='line'>for i in range(len(pos14)):</div><div class='line'>   # Define initial conditions y(0) = y0 and y'(0) = y1</div><div class='line'>   y0 = pos14[i][0]  # Ey(x)</div><div class='line'>   y1 = pos14[i][1]  # y'(x)</div><div class='line'>   initial_conditions = &#123;y.subs(x, 0): y0, y.diff(x).subs(x, 0): y1&#125;</div><div class='line'>   # Solve the differential equation with initial conditions</div><div class='line'>   solution = dsolve(differential_eq, y, ics=initial_conditions)</div><div class='line'>   f=solution.rhs</div><div class='line'>   point = f.subs(x, Key).evalf(100)</div><div class='line'>   point_hash = hashlib.sha256(str(point).encode()).digest()[:16]</div><div class='line'>   cipher = AES.new(point_hash, AES.MODE_CBC, iv)</div><div class='line'>   flag = cipher.decrypt(c)</div><div class='line'>   if b'AKASEC' in flag:</div><div class='line'>       print(flag)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-5apmfr">We first define the differential Equation</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>y = Function('y')(x)</div><div class='line'>differential_eq = Eq(2*y.diff(x, x) - 6*y.diff(x) + 3*y, 0)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-hxtay4">Then iterate through all possible initial conditions, and every solution is evaluated and hashed at the key to derive the AES key.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>for i in range(len(pos14)):</div><div class='line'>   y0 = pos14[i][0]</div><div class='line'>   y1 = pos14[i][1]</div><div class='line'>   initial_conditions = &#123;y.subs(x, 0): y0, y.diff(x).subs(x, 0): y1&#125; </div><div class='line'>   solution = dsolve(differential_eq, y, ics=initial_conditions) # Solve Diff eq </div><div class='line'>   f=solution.rhs</div><div class='line'>   point = f.subs(x, Key).evalf(100) #evaluate</div><div class='line'>   point_hash = hashlib.sha256(str(point).encode()).digest()[:16] #hash</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1rzz1y1">This regenerated AES derived key and IV is used to decrypt the cipher text.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>cipher = AES.new(point_hash, AES.MODE_CBC, iv)</div><div class='line'>flag = unpad(cipher.decrypt(c), AES.block_size)</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-5tsqpy">Flag: <code>AKASEC{d1d_y0u_3nj0y_c41cu1u5_101?}</code></p> <p data-svelte-h="svelte-zii0yf">visit <a href="https://urara-docs.netlify.app" rel="nofollow noopener noreferrer external" target="_blank">urara-docs.netlify.app</a>.</p>]]>
    </content>
    <category term="CTF" scheme="https://urara-demo.netlify.app/?tags=CTF" />
    <category term="Cryptography" scheme="https://urara-demo.netlify.app/?tags=Cryptography" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Elements]]></title>
    <link href="https://urara-demo.netlify.app/hello-world/elements" />
    <id>https://urara-demo.netlify.app/hello-world/elements</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-06-14T07:46:52.067Z</updated>
    <content type="html">
      <![CDATA[<h2 id="headings" data-svelte-h="svelte-17ezzq3"><a href="#headings">Headings</a></h2> <h3 id="heading" data-svelte-h="svelte-1lz1oii"><a href="#heading">Heading</a></h3> <h4 id="heading-1" data-svelte-h="svelte-18swq4u"><a href="#heading-1">Heading</a></h4> <h5 id="heading-2" data-svelte-h="svelte-seo8oo"><a href="#heading-2">Heading</a></h5> <h6 id="heading-3" data-svelte-h="svelte-11zzhhm"><a href="#heading-3">Heading</a></h6> <hr> <h2 id="paragraphs" data-svelte-h="svelte-1jrm51r"><a href="#paragraphs">Paragraphs</a></h2> <p data-svelte-h="svelte-1cwujs"><span class="spoiler">spoiler</span></p> <p data-svelte-h="svelte-1smaymh"><strong><em>The</em></strong> <em>quick</em> <u>brown</u> <a href="https://www.foxnews.com/" rel="nofollow noopener noreferrer external" target="_blank">fox</a> <code>jumps</code> <del>over</del> the lazy <strong>dog</strong>.</p> <p data-svelte-h="svelte-rzm3sy">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p> <p data-svelte-h="svelte-1rcwbbl">建格的何另始養離腳合兒現各談花車是都無處與費別、信善行修覺自！壓總談下市率應次司公母兒用什一線送用標地倒直作任老數年白安足個後引使名隊懷持日落異今特族？</p> <p data-svelte-h="svelte-19ezoke">一士我像衣買了人義，計念？</p> <p data-svelte-h="svelte-k1vvek">期老外並中般灣作各現初知強車我的品式企國立市它北待不型師文人注信方，各成能久，然的孩界，他事應在創灣字母寫麼，會不作散際，學節水……全當名己會天還著行多是生如內他道了家至種樣見景時一……區行水影。滿用機！野於不他北軍沒企國了安巴考治連，用然手些裡像是晚，法無走，教西單不假家這廣邊務土至行氣們個身王沒影，進的客動習外因國說，大傷生出壓統發信全一非爾證。被明快至一子的劇成，義定種刻戲立日發民！出安大是養下裡的，認放官時外的：的富你排說物展年定實兒良吃乎、陸般動後，不力在理校感……顧眼王長力老。</p> <p data-svelte-h="svelte-5q7uy2">重多一？生光聯……動說麼了：起形市般我題臉事級。</p> <blockquote data-svelte-h="svelte-1t277r2"><p>In solitude, where we are least alone.</p></blockquote> <p data-svelte-h="svelte-dbq3jo">私は絶対いよいよ漠然たる相当心に対してはずの他にできるならな。けっして今に養成めも何だか漠然たる仕事たないだけにしからならでをは話安んずるないですて、わざわざには聴いましたなけれた。権力を気がつきなのはどうしても先刻が毫もらしくでう。</p> <p data-svelte-h="svelte-br4gki">ようやく嘉納さんに供獄とても承諾をやるでしょ習慣その主義それか攻撃にに対してお関係でたあるですと、その今は俺か釣竿頭に喜ぶば、嘉納さんののより考のそれをよくごふりと云ってあなた一団がお融和へ見えようにまあご経験にしずませば、とうとうもっとも誤解になるたでいるないのを思っですた。しかもしかしながら大首へする気もずいぶん美味と移ろたて、この言葉にもいうですてってがたにしてしまえたない。この限り時代のためその学校も私上を吹き込んんかと大森さんをしなませ、人の今日んというご講義ただですば、晩の時で長靴が始めだけの時代に前もっでいて、どうの今日が思えばそのためとあたかも足りんなとしだ事でが、ないますなて少し実職業いでし事だろたませ。</p> <p data-svelte-h="svelte-63jeqz">さて学校か不幸か話に教えですけれども、今中力が起るて得るですためがご講演の今に訊かたです。多年をはどうしても思うでいうんたずでと、まるで何とも繰り返しが周旋はさっそく悪いうので。</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <hr> <h2 id="lists" data-svelte-h="svelte-g7u641"><a href="#lists">Lists</a></h2> <h3 id="definition-list-dl" data-svelte-h="svelte-1l26dxc"><a href="#definition-list-dl">Definition List (dl)</a></h3> <dl data-svelte-h="svelte-1593q4a"><dt>Definition List Title</dt><dd>This is a definition list division.</dd></dl> <h3 id="ordered-list-ol" data-svelte-h="svelte-1e2vcc5"><a href="#ordered-list-ol">Ordered List (ol)</a></h3> <ol data-svelte-h="svelte-1lrkorm"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ol> <h3 id="unordered-list-ul" data-svelte-h="svelte-1r3t7r6"><a href="#unordered-list-ul">Unordered List (ul)</a></h3> <ul data-svelte-h="svelte-1m0ot56"><li>List Item 1</li> <li>List Item 2</li> <li>List Item 3</li></ul> <h3 id="checkbox-list-ul" data-svelte-h="svelte-19gylr7"><a href="#checkbox-list-ul">Checkbox List (ul)</a></h3> <ul class="contains-task-list" data-svelte-h="svelte-xge1gw"><li class="task-list-item"><input type="checkbox" disabled> List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 2 checked</li> <li class="task-list-item"><input type="checkbox" checked disabled> List Item 3 checked<ul class="contains-task-list"><li class="task-list-item"><input type="checkbox" disabled> Sub List Item 1 unchecked</li> <li class="task-list-item"><input type="checkbox" checked disabled> Sub List Item 1 checked</li></ul></li></ul> <h2 id="table" data-svelte-h="svelte-47p9vw"><a href="#table">Table</a></h2> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-gczjan"><tr><th>Table Header 1</th> <th>Table Header 2</th> <th>Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-idip7f"><tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr> <tr><td>Division 1</td> <td>Division 2</td> <td>Division 3</td></tr></tbody></table></div> <div class="overflow-x-auto mb-4"><table class="table w-full"><thead data-svelte-h="svelte-7vsuop"><tr><th align="left">Table Header 1</th> <th align="center">Table Header 2</th> <th align="right">Table Header 3</th></tr></thead> <tbody data-svelte-h="svelte-16i6pl9"><tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr> <tr><td align="left">Division 1</td> <td align="center">Division 2</td> <td align="right">Division 3</td></tr></tbody></table></div> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="footnotes" data-svelte-h="svelte-u5fi6x"><a href="#footnotes">Footnotes</a></h2> <p data-svelte-h="svelte-jidotm">Here is a footnote reference. <sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup></p> <p data-svelte-h="svelte-fsvclw">This is a long note. <sup id="fnref-longnote"><a href="#fn-longnote" class="footnote-ref">longnote</a></sup></p> <p data-svelte-h="svelte-xyllmn">This is an inline note. <sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="code" data-svelte-h="svelte-1gehoc9"><a href="#code">Code</a></h2> <!-- HTML_TAG_START --><pre class="shiki material-default with-title twoslash lsp" ts="true" title="examples/index.ts"><div class='code-title'>examples/index.ts</div><div class="language-id">ts</div><div class='code-container'><code><div class='line'>for (let <data-lsp lsp='let x: string' >x</data-lsp> in [0]) <data-lsp lsp='var console: Console' >console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp>(<data-lsp lsp='let x: string' >x</data-lsp>)</div></code></div></pre><!-- HTML_TAG_END --> <!-- HTML_TAG_START --><pre class="shiki material-default twoslash lsp" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'>interface IdLabel &#123;</div><div class='line highlight'>  id: number /* some fields */</div><div class='line highlight'>&#125;</div><div class='line highlight'>interface NameLabel &#123;</div><div class='line highlight'>  name<data-lsp lsp='let a: NameLabel' ></data-lsp>: string /* other fields */</div><div class='line highlight'>&#125;</div><div class='line dim'>type NameOrId&lt;T extends number | string&gt; = T extends number ? IdLabel : NameLabel</div><div class='line dim'>// This comment should not be included</div><div class='line dim'>&nbsp;</div><div class='line dim'>// ---cut---</div><div class='line dim'>function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;</div><div class='line dim'>  throw &apos;unimplemented&apos;</div><div class='line dim'>&#125;</div><div class='line dim'>&nbsp;</div><div class='line dim'>let a = createLabel(&apos;typescript&apos;)</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="misc" data-svelte-h="svelte-1n59eic"><a href="#misc">Misc</a></h2> <sup data-svelte-h="svelte-17o8npf">Lorem</sup> <sub data-svelte-h="svelte-1h4d230">ipsum</sub> <cite data-svelte-h="svelte-2sv5mx">dolor sit amet</cite>, <acronym title="Consectetur Adipiscing Elit" data-svelte-h="svelte-1bkbv8l">consectetur adipiscing elit</acronym>, <abbr title="Aliqua" data-svelte-h="svelte-1qfm1q8">sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</abbr>. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br><br> <p data-svelte-h="svelte-d56c1z">リバースカードオープン、エネミーコントローラー！</p> <p data-svelte-h="svelte-i6obr">ライフを 1000 払い、コマンド入力、<kbd>←</kbd> <kbd>→</kbd> <kbd>A</kbd> <kbd>B</kbd>！</p> <p data-svelte-h="svelte-a1w1jh">このコマンドにより、全てのアニヲタを破壊する！</p> <p data-svelte-h="svelte-11pdwd8"><a href="#headings">scrollToTop</a></p> <h2 id="svelte-components" data-svelte-h="svelte-mjglpj"><a href="#svelte-components">Svelte Components</a></h2>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <br>   <div data-testid="general-observer"></div> <div class="footnotes" data-svelte-h="svelte-11hrpf6"><hr> <ol><li id="fn-1">Here is the footnote.<a href="#fnref-1" class="footnote-backref">↩</a></li> <li id="fn-longnote">Here’s one footnote with longer identifier.<a href="#fnref-longnote" class="footnote-backref">↩</a></li> <li id="fn-2">You can type footnotes inline, so you don’t have to pick an identifier manually.<a href="#fnref-2" class="footnote-backref">↩</a></li></ol></div>]]>
    </content>
    <category term="Urara" scheme="https://urara-demo.netlify.app/?tags=Urara" />
    <category term="Elements" scheme="https://urara-demo.netlify.app/?tags=Elements" />
  </entry>
  <entry>
    <title type="html"><![CDATA[ToC Disabled]]></title>
    <link href="https://urara-demo.netlify.app/hello-world/toc-disabled" />
    <id>https://urara-demo.netlify.app/hello-world/toc-disabled</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2024-06-14T07:46:52.067Z</updated>
    <summary type="html"><![CDATA[This post has disabled table of contents.]]></summary>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-y4beyz">This post has disabled table of contents.</p> <p data-svelte-h="svelte-1b99nud">When the <code>toc: false</code> on Front-Matter, toc should not be displayed.</p> <h2 id="heading" data-svelte-h="svelte-bvxltq"><a href="#heading">Heading</a></h2> <h3 id="heading-1" data-svelte-h="svelte-1pcqacq"><a href="#heading-1">Heading</a></h3> <h4 id="heading-2" data-svelte-h="svelte-akuw8s"><a href="#heading-2">Heading</a></h4>]]>
    </content>
    <category term="Front-Matter" scheme="https://urara-demo.netlify.app/?tags=Front-Matter" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="https://urara-demo.netlify.app/hello-world" />
    <id>https://urara-demo.netlify.app/hello-world</id>
    <published>2021-11-01T00:00:00.000Z</published>
    <updated>2021-12-12T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-1ifgqsq">Welcome to Urara! this article contains some basic operations to help you quickly get started.</p> <h2 id="developing" data-svelte-h="svelte-5maqz3"><a href="#developing">Developing</a></h2> <p data-svelte-h="svelte-gp66ql">Start a development server:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:5173</div><div class='line'>pnpm dev</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1uf8a0f">or listen to different IP and port:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># http://127.0.0.1:3000</div><div class='line'>pnpm dev --port 3000</div><div class='line'></div><div class='line'># http://0.0.0.0:3000</div><div class='line'>nr dev --host 0.0.0.0 --port 3000</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="building" data-svelte-h="svelte-934qmg"><a href="#building">Building</a></h2> <p data-svelte-h="svelte-1nnhc4g">Create a production version of ur blog:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>pnpm build</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-1ez708h">u can preview the built app with <code>pnpm preview</code>.</p> <h2 id="documentation" data-svelte-h="svelte-19euy7a"><a href="#documentation">Documentation</a></h2> <p data-svelte-h="svelte-8e9jxh">For full documentation, visit <a href="https://urara-docs.netlify.app" rel="nofollow noopener noreferrer external" target="_blank">urara-docs.netlify.app</a>.</p>]]>
    </content>
    <category term="Hello World" scheme="https://urara-demo.netlify.app/?tags=Hello%20World" />
    <category term="Urara" scheme="https://urara-demo.netlify.app/?tags=Urara" />
  </entry>
</feed>